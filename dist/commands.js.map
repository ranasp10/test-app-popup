{"version":3,"file":"commands.js","mappings":"YAAA,IAAIA,EACAC,EAeAC,EARJ,SAASC,EAAUC,GACjBC,OAAOC,QAAQC,QAAQC,KAAKC,qBAAqBC,aAAa,eAAgB,CAC5EC,KAAM,eACNC,QAASR,IACR,SAASS,GACZ,GACF,CAsDA,SAASC,EAAeF,GACtBZ,EAASe,KAAKC,MAAMJ,EAAQA,SAC5BK,UAAUjB,GAAQ,SAASa,GACzBX,EAAegB,QACfhB,EAAiB,KACjBD,EAASkB,YACTlB,EAAW,IACb,GACF,CAEA,SAASmB,EAAaR,GACpBV,EAAiB,KACjBD,EAASkB,YACTlB,EAAW,IACb,CA9EAI,OAAOgB,WAAa,SAAUC,GAC9B,EA6DAjB,OAAOkB,QAAQC,UAAU,qBAhDzB,SAA2BC,GAKzB,IAHAzB,EAAS0B,cAGK1B,EAAO2B,cAEnB,IACEC,QAAQ5B,EAAO2B,eAAe,SAASE,EAAMzB,GACvCyB,EACFC,iBAAiBD,GAAM,SAAUE,EAAS3B,GACpC2B,EACF1B,OAAOC,QAAQC,QAAQC,KAAKwB,KAAKC,qBAAqBF,EACpD,CAACG,aAAc7B,OAAO8B,aAAaC,OAAO,SAASvB,GACjDY,EAAMN,WACV,KAEAhB,EAAUC,GACVqB,EAAMN,YAEV,KAEAhB,EAAUC,GACVqB,EAAMN,YAEV,GAIF,CAHE,MAAOkB,GACPlC,EAAUkC,GACVZ,EAAMN,WACR,KAEK,CAELlB,EAAWwB,EAGX,IAAMa,EAAM,IAAIC,IAAI,sCAAsCC,WAAWC,OAAOC,UAAUC,WAGtFtC,OAAOC,QAAQsC,GAAGC,mBAAmBP,EAFf,CAAEQ,MAAO,GAAIC,OAAQ,GAAIC,iBAAiB,IAEP,SAASnC,IAChEX,EAAiBW,EAAOoC,OACTC,gBAAgBC,UAAU9C,OAAO+C,aAAaC,UAAUC,sBAAuBxC,GAC9FZ,EAAegD,gBAAgBC,UAAU9C,OAAO+C,aAAaC,UAAUE,oBAAqBnC,EAC9F,GACF,CACF,G","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["let config;\nlet btnEvent;\n\n// The initialize function must be run each time a new page is loaded.\nOffice.initialize = function (reason) {\n};\n\n// Add any UI-less function here.\nfunction showError(error) {\n  Office.context.mailbox.item.notificationMessages.replaceAsync('github-error', {\n    type: 'errorMessage',\n    message: error\n  }, function(result){\n  });\n}\n\nlet settingsDialog;\n\nfunction insertDefaultGist(event) {\n\n  config = getConfig();\n\n  // Check if the add-in has been configured.\n  if (config && config.defaultGistId) {\n    // Get the default gist content and insert.\n    try {\n      getGist(config.defaultGistId, function(gist, error) {\n        if (gist) {\n          buildBodyContent(gist, function (content, error) {\n            if (content) {\n              Office.context.mailbox.item.body.setSelectedDataAsync(content,\n                {coercionType: Office.CoercionType.Html}, function(result) {\n                  event.completed();\n              });\n            } else {\n              showError(error);\n              event.completed();\n            }\n          });\n        } else {\n          showError(error);\n          event.completed();\n        }\n      });\n    } catch (err) {\n      showError(err);\n      event.completed();\n    }\n\n  } else {\n    // Save the event object so we can finish up later.\n    btnEvent = event;\n    // Not configured yet, display settings dialog with\n    // warn=1 to display warning.\n    const url = new URI('../src/settings/dialog.html?warn=1').absoluteTo(window.location).toString();\n    const dialogOptions = { width: 20, height: 40, displayInIframe: true };\n\n    Office.context.ui.displayDialogAsync(url, dialogOptions, function(result) {\n      settingsDialog = result.value;\n      settingsDialog.addEventHandler(Microsoft.Office.WebExtension.EventType.DialogMessageReceived, receiveMessage);\n      settingsDialog.addEventHandler(Microsoft.Office.WebExtension.EventType.DialogEventReceived, dialogClosed);\n    });\n  }\n}\n\n// Register the function.\nOffice.actions.associate(\"insertDefaultGist\", insertDefaultGist);\n\nfunction receiveMessage(message) {\n  config = JSON.parse(message.message);\n  setConfig(config, function(result) {\n    settingsDialog.close();\n    settingsDialog = null;\n    btnEvent.completed();\n    btnEvent = null;\n  });\n}\n\nfunction dialogClosed(message) {\n  settingsDialog = null;\n  btnEvent.completed();\n  btnEvent = null;\n}\n"],"names":["config","btnEvent","settingsDialog","showError","error","Office","context","mailbox","item","notificationMessages","replaceAsync","type","message","result","receiveMessage","JSON","parse","setConfig","close","completed","dialogClosed","initialize","reason","actions","associate","event","getConfig","defaultGistId","getGist","gist","buildBodyContent","content","body","setSelectedDataAsync","coercionType","CoercionType","Html","err","url","URI","absoluteTo","window","location","toString","ui","displayDialogAsync","width","height","displayInIframe","value","addEventHandler","Microsoft","WebExtension","EventType","DialogMessageReceived","DialogEventReceived"],"sourceRoot":""}